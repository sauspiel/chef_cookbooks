upstream unicorn_server_<%= @app_name %> {
  server unix:/var/run/unicorn/unicorn_<%= @app_name %>.sock fail_timeout=0;
}

server {  
  listen <%= bind_address_to_s(80) %>;
  server_name <%= @server_name %>;
  set $domain <%= @server_name %>;
  set $app <%= @app_name %>; 

  <% if @htpasswd %>
  auth_basic "<%= @app_name %> Restricted Access";
  auth_basic_user_file /etc/nginx/htpasswd.d/<%= @app_name %>.htpasswd;
  <% end -%>

  # Don't serve images from other apps
  # Must come before includes
  location ~ ^/images/(<%= @other_apps %>)/ {
    return 404;
  }

  include /etc/nginx/sites-include/rails-common.conf;

  location @rails {

    include /etc/nginx/common/proxy.conf;

    <% if @ssl %>
    # We never want http hitting rails
    rewrite ^ https://$domain$request_uri permanent;
    <% else %>
    proxy_pass http://unicorn_server_<%= @app_name %>;
    <% end -%>
  }
}

<% if @ssl %>
server {
  listen <%= bind_address_to_s(443) %>;
  server_name <%= @server_name %>;
  set $domain <%= @server_name %>;
  set $app <%= @app_name %>; 

  <% if @htpasswd %>
  auth_basic "<%= @app_name %> Restricted Access";
  auth_basic_user_file /etc/nginx/htpasswd.d/<%= @app_name %>.htpasswd;
  <% end -%>

  # Don't serve images from other apps
  # Must come before includes
  location ~ ^/images/(<%= @other_apps %>)/ {
    return 404;
  }

  ssl on;
  ssl_certificate /etc/ssl_certs/<%=  @server_name %>.crt;
  ssl_certificate_key /etc/ssl_certs/<%=  @server_name %>.key;

  # for PCI compliance
  ssl_protocols SSLv3 TLSv1;
  ssl_ciphers ALL:!ADH:RC4+RSA:+HIGH:+MEDIUM:-LOW:-SSLv2:-EXP;

  include /etc/nginx/sites-include/rails-common.conf;

  location @rails {    
    include /etc/nginx/common/proxy.conf;
    proxy_set_header X_FORWARDED_PROTO https;
    proxy_pass http://unicorn_server_<%= @app_name %>;
  }
}
<% end -%>


<% if @set_default_domain %>

# The better way to "catch" and rewrite domains
# http://wiki.nginx.org/Pitfalls
# Rule 1) No using ifs, use server blocks
# Rule 2) Specify this is a catch_all with "default_server"
# Rule 3) Forget rewrites, just return a 301

server {
  listen <%= bind_address_to_s(80) %> default_server;
  return 301 $scheme://<%= @node[:rails][:default_domain] %>$request_uri;
}

  <% if @ssl %>
server {
  listen <%= bind_address_to_s(443) %> default_server;
  return 301 $scheme://<%= @node[:rails][:default_domain] %>$request_uri;

  ssl on;
  ssl_certificate /etc/ssl_certs/<%=  @server_name %>.crt;
  ssl_certificate_key /etc/ssl_certs/<%=  @server_name %>.key;
  ssl_verify_depth 3;
}
  <% end -%>
<% end -%>

